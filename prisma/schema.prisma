generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONECTION_STRING")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  post Post[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  post Post[]
}

model Post {
  id                 Int       @id @default(autoincrement())
  title              String
  content            String
  images             String[]
  tags               Tag[]
  author             User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments           Comment[]
  slug               String    @unique
  category           Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId         Int
  authorId           Int
  createdAt          DateTime  @default(now())
  backgroundImageUrl String
  likes              String[] @default([])
  dislikes           String[] @default([])
  views              Views[]
  description        String
}

model Views {
  id         Int @id @default(autoincrement())
  apiAdrress String 
  postId     Int 
  post       Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique(fields: [apiAdrress, postId], name: "view")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  createdAt   DateTime  @default(now())
  lastName    String
  firstName   String
  password    String
  comments    Comment[]
  posts       Post[]
  profile     String?
  about       String?
  blogName    String?   @unique
  title       String?
  phoneNumber Int?
  country     String?
  city        String?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}