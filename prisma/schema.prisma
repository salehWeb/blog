generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONECTION_STRING")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  Post Post[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  Post Post[]
}

model Iamge {
  id      Int    @id @default(autoincrement())
  name    String
  fileUrl String @unique
  Post    Post   @relation(fields: [postId], references: [id])
  postId  Int
}

model Avter {
  id      Int    @id @default(autoincrement())
  name    String
  fileUrl String @unique
  User    User   @relation(fields: [userId], references: [id])
  userId  Int    @unique
}

model Post {
  id                 Int       @id @default(autoincrement())
  title              String
  content            String
  images             Iamge[]
  tags               Tag[]
  author             User      @relation(fields: [authorId], references: [id])
  comments           Comment[]
  slug               String    @unique
  category           Category  @relation(fields: [categoryId], references: [id])
  categoryId         Int
  authorId           Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  backgroundImageUrl String
  likes              String[]
  dislikes           String[]
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  createdAt   DateTime  @default(now())
  lastName    String
  firstName   String
  password    String
  comments    Comment[]
  posts       Post[]
  Avter       Avter?
  socil       Socil[]
  about       String?
  blogName    String?   @unique
  title       String?
  phoneNumber Int?
  country     String?
  city        String?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Socil {
  id     Int        @id @default(autoincrement())
  name   SocilTypes @unique
  link   String
  User   User       @relation(fields: [userId], references: [id])
  userId Int
}

enum SocilTypes {
  Linkedin
  Twitter
  Youtube
  Facebook
  Instagram
  Github
}
